;; Carlos Lazo
;; 10-21-04
;; Homework #4
;; Traveling Salesman Problem



;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;; !!!!!!!!!!!!!!!!!!!!!!!! INSTRUCTIONS !!!!!!!!!!!!!!!!!!!!!!!!!
;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;;
;; 1) Please scroll down to the definitions, that is where all of the modifying will be done. The first
;;    thing to change is the travel-cost list of lists. Input the values of the table just as they are
;;    shown, ensuring that there are n lists in the big list, where n is the number of cities. There
;;    should also be n elements within each separate list.
;;
;; 2) Next, change the trav-perms define statement to include all permutations from 0 to n-1
;;    (within the get-permutations function call), for example:
;;          (define trav-perms (generate-permutations '(0 1 2 ... n-1)))
;;
;; 3) Change the number of comparisons to n, where n is the number of cities.
;;
;; 4) Finally, in one of the string outputs, it says, ""For _ cities, the tour which will cost less has a value of :"
;;    Replace the _ with the number of cities you are searching through for clearer printing purposes.


;; Defining helper function to get each of the individual lists from the travel-cost list
;; Function takes a the travel-cost list, the index or the list of values for the specific city
;; that needs to be returned, utilizing a counter to keep track of the place in the list.

(define (get-travel-cost list index counter)
  (cond
    [(empty? list) (error' get-travel-cost "travel-cost list is returning an empty value")]
    [(= counter index) (first list)]
    [else (get-travel-cost (rest list) index (+ counter 1))]
    )
  )

;; The following code for generate-permutations has been taken from Professor Hollinger's code posted online.

(define (add-element-to-lists elem lists)
  (cond 
   [(empty? lists) empty]
   [ else
	 (cons 
	  (cons elem (first lists))
	  (add-element-to-lists elem (rest lists)))]))

(define (generate-permutations alist)
  (cond
   [(empty? alist) (list empty)]
   [(empty? (rest alist)) (list alist)]
   [ else
	 (use-each-element-as-start alist)]))

(define (use-each-element-as-start alist)
  (use-each-element-as-start-helper empty alist))

(define (use-each-element-as-start-helper done remaining)
  (cond
   [(empty? remaining) empty]
   [else
	(append
	 (add-element-to-lists
	  (first remaining)
	  (generate-permutations
	   (append done (rest remaining))))
	 (use-each-element-as-start-helper
	  (append done (list (first remaining)))
	  (rest remaining)))]))

;; make-circular-lists takes a list of lists and appends the first value in each individual list to the end of that
;; list. I decided to use a local scope including the function addright, which adds the given element to the end 
;; of the given list. This is being used in conjunction with make-circular-lists to add the element to the end of the lists.

(define (make-circular-lists list)
  (cond
    [(empty? list) empty]
    [else
     (local
         ( (define (addright elem alist)
              (cond
                [ (empty? alist) (cons elem alist) ]
                [ else 
                  (cons (first alist) (addright elem (rest alist)))])))
           (cons (addright (first (first list)) (first list)) (make-circular-lists (rest list))))]
    )
  )



;; get-value is a helper function that is used to get each of the individual values within the list that it is given
;; within the list of costs that it will be given

(define (get-value list index counter)
  (cond
    [(empty? list) (error' get-value "get-value is returning an empty value")]
    [(= counter index) (first list)]
    [else (get-value (rest list) index (+ counter 1))]
    )
  )

;; cost-between-cities is a function that is given a list-index which corresponds to that specific list in travel-costs,
;; and where val is the actual value that is attained from that specific list

(define (cost-between-cities list-index val)
         (get-value (get-travel-cost travel-cost list-index 0) val 0))

;; sum-tour takes in the list which represents a tour and calculates using recursion the total distance
;; it will take to travel from city to city

(define (sum-tour list list-index counter)
  (cond
    [(= counter comparisons) 0]
    [else
     (+ (cost-between-cities list-index (first (rest list))) (sum-tour (rest list) (first(rest list)) (+ counter 1)))]
  )
)

;; sum-of-all-tours takes the list of list created above of all permutations and calculates each and every value,
;; storing the corresponding values in a list of integers

(define (sums-of-all-tours list)
  (cond
    [(empty? list) empty]
    [else
     (cons (sum-tour (first list) (first (first list)) 0) (sums-of-all-tours (rest list)))]))

;; min-cost takes the list of costs that was generated and finds the smallest value and then returns it

(define (min-cost list elem)
  (cond
    [(empty? list) elem]
    [else
     (cond
       [( < (first list) elem) (min-cost (rest list) (first list))]
       [else (min-cost (rest list) elem)])]
    )
  )

;; get-index-of-min returns the index of the smallest value in the list of integers that corresponds to the 
;; values of each individual tour

(define (get-index-of-min list min-val counter)
  (cond
    [(empty? list) (error' get-index-of-min "returning empty")]
    [(= min-val (first list)) counter]
    [else (get-index-of-min (rest list) min-val (+ counter 1))]))

;; get-efficient-tour returns a tour that has the minimum value in the list of all tours

(define (get-efficient-tour list counter index)
  (cond 
    [(empty? list) (error' get-efficient-tour "returning empty")]
    [(= counter index) (first list)]
    [else (get-efficient-tour (rest list) (+ counter 1) index)]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;; DEFINITIONS ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Defining cost of travel between cities by defining a list of lists

(define travel-cost
  '( (0 10 20 3)
     (10 0 5 8)
     (20 5 0 1)
     (3 8 1 0) )
)

;; travel-perms if a variable defined to hold the list of lists of all permutations possible for all elements
;; sent to the function

(define trav-perms (generate-permutations '(0 1 2 3)))

;; circ-perms is defined as a variable that now contains the new circular lists that will in the end be used
;; to calculate costs

(define circ-perms (make-circular-lists trav-perms))

;; This value is changed based upon the number of total comparisons that will be made within the list.
;; The number of comparisons that will be made are equal to the number of cities in the list.

(define comparisons 4)

;; Defining variable called all-sums which stores all of the sums from the tours

(define all-sums (sums-of-all-tours circ-perms))

;; Defining variable callbe first-sum which stores first element in the sum list for future use

(define first-sum (first all-sums))

;; Defining a variable that stores the minimum value of all the tours

(define min-tour-cost (min-cost all-sums first-sum))
  
"For 4 cities, the tour which will cost less has a value of :"
  
min-tour-cost

;; Defining variable that will find the first place in the integer list that a minimum value is found

(define min-counter (get-index-of-min all-sums min-tour-cost 0)) 

"One of the tours of the minimum value is: "

;; Defining variable that will hold the list of one of the tours that costs the least. This works due to the fact
;; that each of individual lists of permutations is in parallel to the integer lists of their corresponding values.

(define min-tour (get-efficient-tour circ-perms 0 min-counter))

min-tour

;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; TEST 1 ;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;

;; This was the value of travel-cost during the run:

;(define travel-cost
;  '( (0 10 20 3)
;     (10 0 5 8)
;     (20 5 0 1)
;     (3 8 1 0) )
;)

;; *Permutations are shows just to prove that the function works

;Here are all of the permutations for 4 cities :
;(list
; (list 0 1 2 3 0)
; (list 0 1 3 2 0)
; (list 0 2 1 3 0)
; (list 0 2 3 1 0)
; (list 0 3 1 2 0)
; (list 0 3 2 1 0)
; (list 1 0 2 3 1)
; (list 1 0 3 2 1)
; (list 1 2 0 3 1)
; (list 1 2 3 0 1)
; (list 1 3 0 2 1)
; (list 1 3 2 0 1)
; (list 2 0 1 3 2)
; (list 2 0 3 1 2)
; (list 2 1 0 3 2)
; (list 2 1 3 0 2)
; (list 2 3 0 1 2)
; (list 2 3 1 0 2)
; (list 3 0 1 2 3)
; (list 3 0 2 1 3)
; (list 3 1 0 2 3)
; (list 3 1 2 0 3)
; (list 3 2 0 1 3)
; (list 3 2 1 0 3))
;The tour which will cost less has a value of :
;19

;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; TEST 2 ;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;


;; This was the value of travel-cost during the run:

;(define travel-cost
;  '( (0 10 11 10 9)
;     (10 0 11 9 12)
;     (11 11 0 11 11)
;     (10 9 11 0 5) 
;     (9 12 11 5 0))
;)

;; *Permutations are shows just to prove that the function works

;"Here are all of the permutations for 5 cities :"
;(list
; (list 0 1 2 3 4 0)
; (list 0 1 2 4 3 0)
; (list 0 1 3 2 4 0)
; (list 0 1 3 4 2 0)
; (list 0 1 4 2 3 0)
; (list 0 1 4 3 2 0)
; (list 0 2 1 3 4 0)
; (list 0 2 1 4 3 0)
; (list 0 2 3 1 4 0)
; (list 0 2 3 4 1 0)
; (list 0 2 4 1 3 0)
; (list 0 2 4 3 1 0)
; (list 0 3 1 2 4 0)
; (list 0 3 1 4 2 0)
; (list 0 3 2 1 4 0)
; (list 0 3 2 4 1 0)
; (list 0 3 4 1 2 0)
; (list 0 3 4 2 1 0)
; (list 0 4 1 2 3 0)
; (list 0 4 1 3 2 0)
; (list 0 4 2 1 3 0)
; (list 0 4 2 3 1 0)
; (list 0 4 3 1 2 0)
; (list 0 4 3 2 1 0)
; (list 1 0 2 3 4 1)
; (list 1 0 2 4 3 1)
; (list 1 0 3 2 4 1)
; (list 1 0 3 4 2 1)
; (list 1 0 4 2 3 1)
; (list 1 0 4 3 2 1)
; (list 1 2 0 3 4 1)
; (list 1 2 0 4 3 1)
; (list 1 2 3 0 4 1)
; (list 1 2 3 4 0 1)
; (list 1 2 4 0 3 1)
; (list 1 2 4 3 0 1)
; (list 1 3 0 2 4 1)
; (list 1 3 0 4 2 1)
; (list 1 3 2 0 4 1)
; (list 1 3 2 4 0 1)
; (list 1 3 4 0 2 1)
; (list 1 3 4 2 0 1)
; (list 1 4 0 2 3 1)
; (list 1 4 0 3 2 1)
; (list 1 4 2 0 3 1)
; (list 1 4 2 3 0 1)
; (list 1 4 3 0 2 1)
; (list 1 4 3 2 0 1)
; (list 2 0 1 3 4 2)
; (list 2 0 1 4 3 2)
; (list 2 0 3 1 4 2)
; (list 2 0 3 4 1 2)
; (list 2 0 4 1 3 2)
; (list 2 0 4 3 1 2)
; (list 2 1 0 3 4 2)
; (list 2 1 0 4 3 2)
; (list 2 1 3 0 4 2)
; (list 2 1 3 4 0 2)
; (list 2 1 4 0 3 2)
; (list 2 1 4 3 0 2)
; (list 2 3 0 1 4 2)
; (list 2 3 0 4 1 2)
; (list 2 3 1 0 4 2)
; (list 2 3 1 4 0 2)
; (list 2 3 4 0 1 2)
; (list 2 3 4 1 0 2)
; (list 2 4 0 1 3 2)
; (list 2 4 0 3 1 2)
; (list 2 4 1 0 3 2)
; (list 2 4 1 3 0 2)
; (list 2 4 3 0 1 2)
; (list 2 4 3 1 0 2)
; (list 3 0 1 2 4 3)
; (list 3 0 1 4 2 3)
; (list 3 0 2 1 4 3)
; (list 3 0 2 4 1 3)
; (list 3 0 4 1 2 3)
; (list 3 0 4 2 1 3)
; (list 3 1 0 2 4 3)
; (list 3 1 0 4 2 3)
; (list 3 1 2 0 4 3)
; (list 3 1 2 4 0 3)
; (list 3 1 4 0 2 3)
; (list 3 1 4 2 0 3)
; (list 3 2 0 1 4 3)
; (list 3 2 0 4 1 3)
; (list 3 2 1 0 4 3)
; (list 3 2 1 4 0 3)
; (list 3 2 4 0 1 3)
; (list 3 2 4 1 0 3)
; (list 3 4 0 1 2 3)
; (list 3 4 0 2 1 3)
; (list 3 4 1 0 2 3)
; (list 3 4 1 2 0 3)
; (list 3 4 2 0 1 3)
; (list 3 4 2 1 0 3)
; (list 4 0 1 2 3 4)
; (list 4 0 1 3 2 4)
; (list 4 0 2 1 3 4)
; (list 4 0 2 3 1 4)
; (list 4 0 3 1 2 4)
; (list 4 0 3 2 1 4)
; (list 4 1 0 2 3 4)
; (list 4 1 0 3 2 4)
; (list 4 1 2 0 3 4)
; (list 4 1 2 3 0 4)
; (list 4 1 3 0 2 4)
; (list 4 1 3 2 0 4)
; (list 4 2 0 1 3 4)
; (list 4 2 0 3 1 4)
; (list 4 2 1 0 3 4)
; (list 4 2 1 3 0 4)
; (list 4 2 3 0 1 4)
; (list 4 2 3 1 0 4)
; (list 4 3 0 1 2 4)
; (list 4 3 0 2 1 4)
; (list 4 3 1 0 2 4)
; (list 4 3 1 2 0 4)
; (list 4 3 2 0 1 4)
; (list 4 3 2 1 0 4))

;"For 5 cities, the tour which will cost less has a value of :"
;45
;"One of the tours of the minimum value is: "
;(list 0 2 1 3 4 0)

;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; TEST 3 ;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;


;; This was the value of travel-cost during the run:

;(define travel-cost
;  '( (0 3 10 5 6 10)
;     (3 0 5 3 11 6)
;     (10 5 0 8 5 5)
;     (5 3 8 0 7 6) 
;     (6 11 5 7 0 12)
;     (10 6 5 6 12 0))
;)
;

;"For 6 cities, the tour which will cost less has a value of :"
;28
;"One of the tours of the minimum value is: "
;(list 0 1 3 5 2 4 0)

;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; TEST 4 ;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;

;; This was the value of travel-cost during the run:

;(define travel-cost
;  '( (0 4 9 3 6 9 11)
;     (4 0 10 12 7 12 11)
;     (9 10 0 7 6 4 12)
;     (3 12 7 0 10 6 4)
;     (6 7 6 10 0 7 12)
;     (9 12 4 6 7 0 7)
;     (11 11 12 4 12 7 0) )
;)

;"For 7 cities, the tour which will cost less has a value of :"
;35
;"One of the tours of the minimum value is: "
;(list 0 1 4 2 5 6 3 0)

;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; TEST 5 ;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;

;; This was the value of travel-cost during the run:

;(define travel-cost
;  '( (0 7 5 8 5 10 5 3)
;     (7 0 10 12 9 12 3 8)
;     (5 10 0 5 8 5 6 12)
;     (8 12 5 0 12 8 4 8)
;     (5 9 8 12 0 7 8 5)
;     (10 12 5 8 7 0 8 3)
;     (5 3 6 4 8 8 0 4)
;     (3 8 12 8 4 2 4 0 ))
;)
;
;"For 8 cities, the tour which will cost less has a value of :"
;36
;"One of the tours of the minimum value is: "
;(list 0 1 6 3 2 5 7 4 0)

