;; Carlos Lazo
;; 10-14-04
;; Quiz #6 - Traveling Salesman Problem : Data Definitions

;; 1) Table of Costs:

;;         The Table of Costs for traveling from one city to another will be represented as a list of lists. Following this logic,
;;    each element of the big list will stand for one row of the given table. Due to the fact that the cities will be known as 
;;    numbers and not as symbols, it will be fairly simple to extract the necessary data for a cost analysis between two cities.
;;    This will be stored as a global variable so that all functions will have access to it.

;;      '( (0 10 20 3)     - This is an example model a Travel Cost Table and how it would be defined.
;;         (10 0 5  8)     * NOTE : This table will never evaluate to empty as long as it is defined 
;;         (20 5 0  8)              with atleast 1 city.
;;         (3  8 1  0) )

;; 2) Tours :

;;         The Tours will be represented also as a list of lists.  Using each of the cities as a beginning element in these small 
;;    lists, permutations will be calculated for all elements except the first element. Afterwards, after the permutations have
;;    been assimilated into one list, the beginning element will be aggregated to the beginning and end of each of these small
;;    lists. This big Tour list will then be used later on in conjunction with another function that utilizes the Table of Costs.

;;(list
;; (list 0 1 2 3 0)      - This is an example representation of a four-city Tour list that will be utilized later to calculate all possible
;; (list 0 1 3 2 0)        trip costs.
;; (list 0 2 1 3 0)      * NOTE : This list will never result as an empty list, granted that there is atleast 1 city
;; (list 0 2 3 1 0)               defined at the beginning of the program.
;; (list 0 3 1 2 0)
;; (list 0 3 2 1 0)
;; (list 1 0 2 3 1)
;; (list 1 0 3 2 1)
;; (list 1 2 0 3 1)
;; (list 1 2 3 0 1)
;; (list 1 3 0 2 1)
;; (list 1 3 2 0 1)
;; (list 2 0 1 3 2)
;; (list 2 0 3 1 2)
;; (list 2 1 0 3 2)
;; (list 2 1 3 0 2)
;; (list 2 3 0 1 2)
;; (list 2 3 1 0 2)
;; (list 3 0 1 2 3)
;; (list 3 0 2 1 3)
;; (list 3 1 0 2 3)
;; (list 3 1 2 0 3)
;; (list 3 2 0 1 3)
;; (list 3 2 1 0 3))

;; 3) Cost of Tour :

;;         This will be represented as a single list.  The idea is that the list of lists, which contains all of the possible tours
;;   will be sent to an external function, will will compute the total value of the tour and add it to this list. With this being 
;;   said, the Tour list and the Cost of Tour list will then be parallel to each other, with each of elements corresponding to their 
;;   appropriate counterpart at the same position in the other list.

;;   '(34 67 56 44 32 28 !24 66 33 88 25 26)    - This denotes an example list of integers that will be generated by a function.
;;                                            ! - The starred element would be the Tour that would cost the least amount of money.
;;                                                Therefore, the corresponding element in the Tour list at that same position would
;;                                                would be the tour that has that integer value as its cost.
;;                                            * - This list will never result as an empty list, granted that there is atleast 1 city
;;                                                defined at the beginning of the program.