WXME0108 ## 
#|
   This file is in PLT Scheme editor format.
   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements (such
   as pictures, comment boxes, or test-cases boxes).
   Open this file in DrScheme to read its content.
                 www.plt-scheme.org
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
3 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 15 #"make-line-snip\0"
1 0 15 #"make-line-snip\0"
1 0 13 #"example-box%\0"
2 0 18 #"interactions-box%\0"
2 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 34 #"drscheme:vertical-separator-snip%\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 10 #"text-box%\0"
1 0 1 6 #"wxloc\0"
00000000000 1 83 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 27
#"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 40
#"framework:syntax-coloring:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 41
#"framework:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
41 #"framework:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 40
#"framework:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 42
#"framework:syntax-coloring:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 45
#"framework:syntax-coloring:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 39
#"framework:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 39
#"framework:syntax-coloring:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 14
#"Html Standard\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
49 #"drscheme:check-syntax:lexically-bound-identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 42
#"drscheme:check-syntax:imported-identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 39
#"profj:syntax-coloring:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 40
#"profj:syntax-coloring:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 36
#"profj:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 39
#"profj:syntax-coloring:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 4
#"XML\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 21
1 #"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 -2 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 -2 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 -1 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 21
1 #"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 75 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 75 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 21 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 -1 1 #"\0"
2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 75 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 -1 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 -1 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 -1 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 75 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 75 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 21 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 75 1 #"\0"
0.8 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 21 1
#"\0"
0 75 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 21 1
#"\0"
0 70 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 21 1
#"\0"
0 70 1 #"\0"
0.8 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 0 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
00000000003 0 00000000000 1 00000000000 7 00000000000 6265 0 11 3 14
#";; Carlos Lazo"
0 0 4 29 1 #"\n"
0 0 11 3 11 #";; 10-26-06"
0 0 4 29 1 #"\n"
0 0 11 3 26 #";; Artificial Intelligence"
0 0 4 29 1 #"\n"
0 0 11 3 36 #";; Homework #3 - Connect Four Player"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 53 #";; Must be included for random numbers to be enabled."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 8 3 9 #"#%require"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"only"
0 0 18 3 1 #" "
0 0 8 3 8 #"mzscheme"
0 0 18 3 1 #" "
0 0 8 3 6 #"random"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 53 #";; *********************************************** ;;"
0 0 4 29 1 #"\n"
0 0 11 3 53 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 53 #";;;;;;;;;;  Static Evaluation Function  ;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 53 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 53 #";; *********************************************** ;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 70
(
 #";; NOTE : Function value of 1000 = WIN, Function value of -1000 = L"
 #"OSS"
) 0 0 4 29 1 #"\n"
0 0 11 3 32 #";;        Function value of 0 = "
0 0 11 3 1 #"s"
0 0 11 3 1 #"y"
0 0 11 3 1 #"m"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"t"
0 0 11 3 1 #"r"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"c"
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"e"
0 0 11 3 1 #"v"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"u"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 2 #"n."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 48 #";; First define all necessary support functions."
0 0 4 29 1 #"\n"
0 0 11 3 66
#";; The code contained in the *** is taken from Dave's sample code."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 44 #"; nth-row extracts a single row from a board"
0 0 4 29 1 #"\n"
0 0 11 3 30 #"; (and returns it as a list). "
0 0 4 29 1 #"\n"
0 0 11 3 59
#"; board is a game board representation (see above) and n is"
0 0 4 29 1 #"\n"
0 0 11 3 34 #"; a row number (0 is the top row)."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 13 #"lazoc-nth-row"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 1 #"n"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 8 3 5 #"g-row"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 2 #"ls"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 2 #"()"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"n"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"g-row"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 2 #"; "
0 0 11 3 15 #"lazoc-getsqaure"
0 0 11 3 56 #" extracts and returns a single board element (0, 1 or 2)"
0 0 4 29 1 #"\n"
0 0 11 3 50 #"; board is a game board representation (see above)"
0 0 4 29 1 #"\n"
0 0 11 3 50 #"; row and col are the row number and column number"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 15 #"lazoc-getsqaure"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 59
#"; list-replaceelem modifies a list by setting the specified"
0 0 4 29 1 #"\n"
0 0 11 3 56 #"; list element to a new value, and returns the new list."
0 0 4 29 1 #"\n"
0 0 11 3 65
#"; parameters are l (the list), pos the position of the element to"
0 0 4 29 1 #"\n"
0 0 11 3 52 #"; be changed: 0 is the first element (the car), etc."
0 0 4 29 1 #"\n"
0 0 11 3 50 #"; newval is the value the new element shoudl take."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 56 #"; example - this replaces the value of position 1 in the"
0 0 4 29 1 #"\n"
0 0 11 3 36 #"; list '(a b c) with the value 'foo:"
0 0 4 29 1 #"\n"
0 0 11 3 49 #"; (list-replaceelem '(a b c) 1 'foo) => (a foo c)"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 22 #"lazoc-list-replaceelem"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 3 #"pos"
0 0 4 3 1 #" "
0 0 8 3 6 #"newval"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 8 3 6 #"newval"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 22 #"lazoc-list-replaceelem"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"newval"
0 0 16 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 52 #"; setsquare sets the value of a single board element"
0 0 4 29 1 #"\n"
0 0 11 3 66
#"; No check is done to make sure the board element has the value 0!"
0 0 4 29 1 #"\n"
0 0 11 3 50 #"; board is a game board representation (see above)"
0 0 4 29 1 #"\n"
0 0 11 3 50 #"; row and col are the row number and column number"
0 0 4 29 1 #"\n"
0 0 11 3 53 #"; newval is the new value (probably should be 1 or 2)"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 9 #"setsquare"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 4 3 1 #" "
0 0 8 3 6 #"newval"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 22 #"lazoc-list-replaceelem"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 8 3 22 #"lazoc-list-replaceelem"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 8 3 6 #"newval"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 51 #"; rightdiag extracts a right diagonal from a board."
0 0 4 29 1 #"\n"
0 0 11 3 62
#"; right diags start at the bottom and move up and to the right"
0 0 4 29 1 #"\n"
0 0 11 3 50 #"; board is a game board representation (see above)"
0 0 4 29 1 #"\n"
0 0 11 3 58
#"; row and col are the starting coordinates of the diagonal"
0 0 4 29 1 #"\n"
0 0 11 3 40 #"; (the bottom most element is the start)"
0 0 4 29 1 #"\n"
0 0 11 3 2 #"; "
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 9 #"rightdiag"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 4 #"cols"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 2 #"))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"diag"
0 0 4 3 1 #" "
0 0 16 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 2 #"))"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 2 #"(("
0 0 8 3 2 #"or"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 2 #">="
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 8 3 4 #"cols"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 3 #"   "
0 0 8 3 4 #"diag"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 4 #"diag"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"append"
0 0 4 3 1 #" "
0 0 8 3 4 #"diag"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"list"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 15 #"lazoc-getsqaure"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 16 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 48 #"; leftdiag extracts a left diagonal from a board"
0 0 4 29 1 #"\n"
0 0 11 3 60
#"; left diags start at the bottom and move up and to the left"
0 0 4 29 1 #"\n"
0 0 11 3 58
#"; row and col are the starting coordinates of the diagonal"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 8 #"leftdiag"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 4 #"cols"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"diag"
0 0 4 3 1 #" "
0 0 16 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 2 #"))"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 2 #"(("
0 0 8 3 2 #"or"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 2 #"))"
0 0 4 3 3 #"   "
0 0 8 3 4 #"diag"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 4 #"diag"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"append"
0 0 4 3 1 #" "
0 0 8 3 4 #"diag"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"list"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 15 #"lazoc-getsqaure"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 16 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 54 #"; rightdiags returns a list of all the right diagonals"
0 0 4 29 1 #"\n"
0 0 11 3 34 #"; that include 4 or more elements."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 10 #"rightdiags"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 5 #"diags"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"cols"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 4 #"rows"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"rightdiag"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 4 #"cols"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"rightdiag"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 8 3 5 #"diags"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 52 #"; leftdiags returns a list of all the left diagonals"
0 0 4 29 1 #"\n"
0 0 11 3 34 #"; that include 4 or more elements."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 9 #"leftdiags"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 5 #"diags"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 4 #"cols"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 4 3 1 #" "
0 0 8 3 4 #"cols"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"leftdiag"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 4 #"rows"
0 0 4 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"leftdiag"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 4 #"cols"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 8 3 5 #"diags"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 8 3 5 #"diags"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 41 #"; convert list of columns to list of rows"
0 0 4 29 1 #"\n"
0 0 11 3 40 #"; Given a board of c columns and r rows,"
0 0 4 29 1 #"\n"
0 0 11 3 68
#"; the board representation is a list of c elements (one per column),"
0 0 4 29 1 #"\n"
0 0 11 3 65
#"; each element is a list contains the values for each square in a"
0 0 4 29 1 #"\n"
0 0 11 3 68
#"; column. This procedure returns a list of r elements (one per row),"
0 0 4 29 1 #"\n"
0 0 11 3 66
#"; each element is a list containinf the values for each square in "
0 0 4 29 1 #"\n"
0 0 11 3 9 #"; a row. "
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 15 #"board-transpose"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 2 #"bt"
0 0 4 3 1 #" "
0 0 16 3 3 #"())"
0 0 4 3 3 #"   "
0 0 16 3 1 #"("
0 0 8 3 3 #"len"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"i"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 2 #"bt"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 2 #"bt"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 13 #"lazoc-nth-row"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 1 #"i"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 2 #"bt"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 71
(
 #"; getall extracts all rows, columns and diagonals and makes a big l"
 #"ist."
) 0 0 4 29 1 #"\n"
0 0 11 3 52 #"; each element of the list could contain 4 in a row."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 6 #"getall"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 6 #"append"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 8 3 5 #"board"
0 0 4 3 20 #"                    "
0 0 11 3 25 #"; board holds the columns"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 15 #"board-transpose"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 3 2 #"  "
0 0 11 3 10 #"; the rows"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 10 #"rightdiags"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 3 7 #"       "
0 0 11 3 15 #"; the diagonals"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 16 3 1 #"("
0 0 8 3 9 #"leftdiags"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 68
#"; four-in-a-row? is a predicate that returns true if a list contains"
0 0 4 29 1 #"\n"
0 0 11 3 55 #"; 4 consecutive elements that all match a single value."
0 0 4 29 1 #"\n"
0 0 11 3 61
#"; l is the list (could be from a row, column or diaganol) and"
0 0 4 29 1 #"\n"
0 0 11 3 46 #"; e is the value we are looking for (1 or 2)  "
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 14 #"four-in-a-row?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 1 #"e"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 8 3 5 #"finar"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 2 #"ls"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"count"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 11 3 66
#"; if we don't have enough elements left to make 4 in a row - FALSE"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 5 #"count"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"4"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 14 3 2 #"#f"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 11 3 16 #"; we got a match"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 5 #"count"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 14 3 2 #"#t"
0 0 4 3 12 #"            "
0 0 11 3 13 #"; 4 in a row!"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 5 #"finar"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 5 #"count"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 11 3 10 #"; no match"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 5 #"finar"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";; Define global variables ;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 5 #"other"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_one"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 7 #"p_three"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_one"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_two"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 7 #"o_three"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 11 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 29 1 #"\n"
0 0 11 3 2 #"  "
0 0 14 3 1 #"'"
0 0 16 3 1 #"("
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 11 3 3 #"   "
0 0 16 3 1 #"("
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 4 29 1 #"\n"
0 0 11 3 3 #"   "
0 0 16 3 1 #"("
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"0"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 11 3 3 #"   "
0 0 16 3 1 #"("
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 11 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 13 #"extract-board"
0 0 4 3 1 #" "
0 0 14 3 1 #"'"
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";; Define helper functions ;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 61
#";; Function win-check checks to see if there is a win in the "
0 0 4 29 1 #"\n"
0 0 11 3 52 #";; listed row utilizing the four-in-a-row? function."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"win-check"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"#f"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 14 #"four-in-a-row?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"win-check"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 84
(
 #";; Function count-first-elem and helper is used to find the first p"
 #"layer piece found"
) 0 0 4 29 1 #"\n"
0 0 11 3 68
#";; in each column. This value will be added to the global variables."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"cfe-helper"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 4 3 1 #" "
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_one"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_one"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"other"
0 0 4 3 2 #"  "
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_one"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_one"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"cfe-helper"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 16 #"count-first-elem"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_one"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_one"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 16 3 1 #"("
0 0 8 3 10 #"cfe-helper"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 16 3 1 #"("
0 0 8 3 16 #"count-first-elem"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"F"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 2 #"on"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"e"
0 0 11 3 1 #"-"
0 0 11 3 1 #"c"
0 0 11 3 2 #"he"
0 0 11 3 1 #"c"
0 0 11 3 1 #"k"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"e"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"g"
0 0 11 3 1 #"a"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #"T"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 2 #" w"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 2 #" a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"l"
0 0 11 3 1 #"u"
0 0 11 3 1 #"m"
0 0 11 3 1 #"n"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #"."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 1 #"d"
0 0 9 3 1 #"e"
0 0 9 3 1 #"f"
0 0 9 3 1 #"i"
0 0 9 3 1 #"n"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"t"
0 0 8 3 1 #"i"
0 0 8 3 1 #"e"
0 0 8 3 1 #"-"
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 1 #"c"
0 0 8 3 1 #"k"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 2 #"rd"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 1 #"c"
0 0 9 3 1 #"o"
0 0 9 3 1 #"n"
0 0 9 3 1 #"d"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 1 #"n"
0 0 8 3 1 #"u"
0 0 8 3 1 #"l"
0 0 8 3 1 #"l"
0 0 8 3 1 #"?"
0 0 4 3 1 #" "
0 0 8 3 4 #"boar"
0 0 8 3 1 #"d"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"t"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 1 #"e"
0 0 8 3 1 #"q"
0 0 8 3 1 #"u"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"?"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"a"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 1 #"d"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"f"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 1 #"e"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"t"
0 0 8 3 1 #"i"
0 0 8 3 1 #"e"
0 0 8 3 1 #"-"
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 1 #"c"
0 0 8 3 1 #"k"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"d"
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 1 #"d"
0 0 16 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 11 3 32 #";; Function two-check and helper"
0 0 11 3 45 #"s look to find any place where there are two "
0 0 4 29 1 #"\n"
0 0 11 3 61
#";; elements in a rowGlobal variables are updated accordingly."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"delete-zero"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"'"
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"delete-zero"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"delete-zero"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"twoc-helper"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 7 #"rm-list"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"delete-zero"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 2 #"(("
0 0 8 3 3 #"not"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #">="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_two"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_two"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"two-check"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_two"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 16 3 1 #"("
0 0 8 3 11 #"twoc-helper"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 16 3 1 #"("
0 0 8 3 9 #"two-check"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 78
(
 #";; Function three-check and helper look to find any place where the"
 #"re are two "
) 0 0 4 29 1 #"\n"
0 0 11 3 61
#";; elements in a rowGlobal variables are updated accordingly."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 13 #"threec-helper"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 7 #"rm-list"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"delete-zero"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 2 #"(("
0 0 8 3 3 #"not"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #">="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 7 #"p_three"
0 0 4 3 1 #" "
0 0 8 3 7 #"p_three"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 16 3 1 #"("
0 0 9 3 1 #"c"
0 0 9 3 1 #"o"
0 0 9 3 1 #"n"
0 0 9 3 1 #"d"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 16 3 2 #"(("
0 0 8 3 3 #"and"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 8 3 1 #"t"
0 0 8 3 1 #"!"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"_"
0 0 8 3 3 #"thr"
0 0 8 3 2 #"ee"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"_"
0 0 8 3 2 #"th"
0 0 8 3 1 #"r"
0 0 8 3 1 #"e"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 16 3 2 #"(("
0 0 8 3 3 #"and"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"o"
0 0 8 3 1 #"t"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 1 #"r"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"o"
0 0 8 3 1 #"t"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 1 #"r"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 8 3 7 #"rm-list"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"o"
0 0 8 3 1 #"t"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 1 #"r"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 8 3 1 #"t"
0 0 8 3 1 #"!"
0 0 4 3 1 #" "
0 0 8 3 2 #"o_"
0 0 8 3 3 #"thr"
0 0 8 3 2 #"ee"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 8 3 2 #"o_"
0 0 8 3 2 #"th"
0 0 8 3 1 #"r"
0 0 8 3 1 #"e"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 16 3 1 #"("
0 0 8 3 1 #"e"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 8 3 1 #"t"
0 0 8 3 1 #"!"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"_"
0 0 8 3 1 #"t"
0 0 8 3 1 #"h"
0 0 8 3 1 #"r"
0 0 8 3 1 #"e"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"_"
0 0 8 3 1 #"t"
0 0 8 3 1 #"h"
0 0 8 3 1 #"r"
0 0 8 3 1 #"e"
0 0 8 3 1 #"e"
0 0 16 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 11 #"three-check"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 7 #"p_three"
0 0 4 3 1 #" "
0 0 8 3 7 #"p_three"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 16 3 1 #"("
0 0 8 3 13 #"threec-helper"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 16 3 1 #"("
0 0 8 3 11 #"three-check"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 30 #"; Board evaluation function ;;"
0 0 4 29 1 #"\n"
0 0 11 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"board-eval"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 11 3 57 #";; Set new board that contains all extracted information."
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 13 #"extract-board"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"getall"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 11 3 42 #";; -- Perform board evaluation function --"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 11 3 57 #";; First check to see if there are any wins in the board."
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 2 #"(("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"win-check"
0 0 4 3 1 #" "
0 0 8 3 13 #"extract-board"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"1000"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 2 #"(("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"win-check"
0 0 4 3 1 #" "
0 0 8 3 13 #"extract-board"
0 0 4 3 1 #" "
0 0 8 3 5 #"other"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"-1000"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 11 3 72
(
 #";; If there was no instant win, then perform complete analysis of b"
 #"oard."
) 0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 71
(
 #";; Begin by counting all of the top elements in the board and adjus"
 #"ting"
) 0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 38 #";; the global variables appropriately."
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 16 3 1 #"("
0 0 8 3 16 #"count-first-elem"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 80
(
 #";; Now look at extracted board rows and search for those containing"
 #" two elements"
) 0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 55 #";; in a row. Update the global variables appropriately."
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 16 3 1 #"("
0 0 8 3 9 #"two-check"
0 0 4 3 1 #" "
0 0 8 3 13 #"extract-board"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 82
(
 #";; Now look at extracted board rows and search for those containing"
 #" three elements"
) 0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 55 #";; in a row. Update the global variables appropriately."
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 16 3 1 #"("
0 0 8 3 11 #"three-check"
0 0 4 3 1 #" "
0 0 8 3 13 #"extract-board"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"N"
0 0 11 3 1 #"o"
0 0 11 3 1 #"w"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"c"
0 0 11 3 1 #"u"
0 0 11 3 1 #"l"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"d"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #","
0 0 11 3 1 #" "
0 0 11 3 1 #"e"
0 0 11 3 1 #"v"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"u"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"u"
0 0 11 3 1 #"s"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #"o"
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"m"
0 0 11 3 1 #"u"
0 0 11 3 1 #"l"
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #":"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 9 #" BOARD ST"
0 0 11 3 10 #"ATE = [(5*"
0 0 11 3 9 #"p_three) "
0 0 11 3 4 #"+ (3"
0 0 11 3 2 #"*p"
0 0 11 3 3 #"_tw"
0 0 11 3 2 #"o)"
0 0 11 3 4 #" + ("
0 0 11 3 1 #"1"
0 0 11 3 11 #"*p_one)] - "
0 0 11 3 3 #"[(5"
0 0 11 3 4 #"*o_t"
0 0 11 3 3 #"hre"
0 0 11 3 2 #"e)"
0 0 11 3 1 #" "
0 0 11 3 2 #"+ "
0 0 11 3 6 #"(3*o_t"
0 0 11 3 1 #"w"
0 0 11 3 2 #"o)"
0 0 11 3 3 #" + "
0 0 11 3 3 #"(1*"
0 0 11 3 6 #"o_one)"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"5"
0 0 4 3 1 #" "
0 0 8 3 5 #"p_thr"
0 0 8 3 1 #"e"
0 0 8 3 1 #"e"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"_"
0 0 8 3 1 #"t"
0 0 8 3 1 #"w"
0 0 8 3 1 #"o"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 4 3 1 #" "
0 0 8 3 2 #"p_"
0 0 8 3 3 #"one"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"5"
0 0 4 3 1 #" "
0 0 8 3 5 #"o_thr"
0 0 8 3 1 #"e"
0 0 8 3 1 #"e"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"3"
0 0 4 3 1 #" "
0 0 8 3 3 #"o_t"
0 0 8 3 1 #"w"
0 0 8 3 1 #"o"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 4 3 1 #" "
0 0 8 3 2 #"o_"
0 0 8 3 3 #"one"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 7 #";; ****"
0 0 11 3 36 #"********************************* ;;"
0 0 4 29 1 #"\n"
0 0 11 3 43 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 12 #";;;;;;;;;;  "
0 0 11 3 4 #"Mini"
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 25 #"x Function  ;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 43 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 43 #";; ************************************* ;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 48 #";; First define all necessary support functions."
0 0 4 29 1 #"\n"
0 0 11 3 66
#";; The code contained in the *** is taken from Dave's sample code."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 72
(
 #"; find-first-zero finds the first element in a list that has the va"
 #"lue 0"
) 0 0 4 29 1 #"\n"
0 0 11 3 55 #"; and return it's position in the list (starting at 0)."
0 0 4 29 1 #"\n"
0 0 11 3 56 #"; returns (+ (length ls) 1) if the element is not found!"
0 0 4 29 1 #"\n"
0 0 11 3 68
#"; Used (by find-last-zero) to find where dropped marble will end up."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 17 #"; CHANGE 10/30/98"
0 0 4 29 1 #"\n"
0 0 11 3 72
(
 #"; DLH - member returns #f if not found, this is () only with MIT sc"
 #"heme!"
) 0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 15 #"find-first-zero"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 15 #"find-first-zero"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 47 #"; find-last-zero finds the last zero in a list."
0 0 4 29 1 #"\n"
0 0 11 3 52 #"; This assume the list consists of a (possibly null)"
0 0 4 29 1 #"\n"
0 0 11 3 57 #"; prefix of zeros followed by a (possibly null) suffix of"
0 0 4 29 1 #"\n"
0 0 11 3 62
#"; things other than zeros. This is used to find where a marble"
0 0 4 29 1 #"\n"
0 0 11 3 66
#"; should drop to (should end up replacing the last 0 in a column)."
0 0 4 29 1 #"\n"
0 0 11 3 66
#"; If there are no zeros, this returns -1, otherwise it returns the"
0 0 4 29 1 #"\n"
0 0 11 3 55 #"; position (starting at 0) of the last zero in the list"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 14 #"find-last-zero"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"length"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 15 #"find-first-zero"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 8 3 2 #"ls"
0 0 16 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 35 #"; ================================="
0 0 4 29 1 #"\n"
0 0 11 3 60
#"; makemove applies a move (by dropping a marble in a column)"
0 0 4 29 1 #"\n"
0 0 11 3 57 #"; to a board and returns the resulting board or #f if the"
0 0 4 29 1 #"\n"
0 0 11 3 36 #"; move is not valid (column is full)"
0 0 4 29 1 #"\n"
0 0 11 3 33 #"; board is the current game state"
0 0 4 29 1 #"\n"
0 0 11 3 51 #"; player is 1 or 2 (the player dropping the marble)"
0 0 4 29 1 #"\n"
0 0 11 3 43 #"; col is the column number (starting at 0)."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 8 #"makemove"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 14 #"find-last-zero"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 14 3 1 #"#"
0 0 14 3 1 #"f"
0 0 4 3 17 #"                 "
0 0 11 3 15 #"; no room left!"
0 0 4 29 1 #"\n"
0 1 4 65 1 #"\t"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 9 #"setsquare"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 3 #"row"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 11 3 75
(
 #";; ****************************************************************"
 #"***** ;;"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";; Define global variables ;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";; Define helper functions ;;"
0 0 4 29 1 #"\n"
0 0 11 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"F"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #"o"
0 0 11 3 1 #"s"
0 0 11 3 1 #"s"
0 0 11 3 1 #"i"
0 0 11 3 1 #"b"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"-"
0 0 11 3 1 #"m"
0 0 11 3 1 #"o"
0 0 11 3 1 #"v"
0 0 11 3 1 #"e"
0 0 11 3 2 #"s "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"t"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"l"
0 0 11 3 1 #"p"
0 0 11 3 1 #"e"
0 0 11 3 2 #"r "
0 0 11 3 1 #"t"
0 0 11 3 1 #"a"
0 0 11 3 1 #"k"
0 0 11 3 2 #"e "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #"l"
0 0 11 3 1 #"a"
0 0 11 3 1 #"y"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"p"
0 0 11 3 1 #"u"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 2 #" c"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 2 #"t "
0 0 11 3 1 #"o"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #"o"
0 0 11 3 1 #"s"
0 0 11 3 1 #"s"
0 0 11 3 1 #"i"
0 0 11 3 1 #"b"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #"s"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #"T"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"u"
0 0 11 3 1 #"c"
0 0 11 3 1 #"c"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 11 3 1 #"s"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 7 #"delete-"
0 0 8 3 1 #"f"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"'"
0 0 16 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 1 #"e"
0 0 8 3 1 #"q"
0 0 8 3 1 #"u"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"f"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 7 #"delete-"
0 0 8 3 1 #"f"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 4 #"else"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 7 #"delete-"
0 0 8 3 1 #"f"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 1 #"l"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 4 #"defi"
0 0 9 3 1 #"n"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"p"
0 0 8 3 1 #"o"
0 0 8 3 1 #"s"
0 0 8 3 1 #"s"
0 0 8 3 1 #"i"
0 0 8 3 1 #"b"
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"-"
0 0 8 3 1 #"m"
0 0 8 3 1 #"o"
0 0 8 3 1 #"v"
0 0 8 3 1 #"e"
0 0 8 3 1 #"s"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 1 #"d"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"l"
0 0 8 3 1 #"a"
0 0 8 3 1 #"y"
0 0 8 3 2 #"er"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 2 #"co"
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"n"
0 0 8 3 1 #"g"
0 0 8 3 1 #"t"
0 0 8 3 1 #"h"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 1 #"d"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 8 #"makemove"
0 0 4 3 1 #" "
0 0 8 3 5 #"board"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 1 #"e"
0 0 8 3 1 #"l"
0 0 8 3 2 #"se"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"d"
0 0 8 3 1 #"e"
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"t"
0 0 8 3 2 #"e-"
0 0 8 3 1 #"f"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"cons"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"m"
0 0 8 3 1 #"a"
0 0 8 3 1 #"k"
0 0 8 3 1 #"e"
0 0 8 3 1 #"m"
0 0 8 3 1 #"o"
0 0 8 3 1 #"v"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 2 #"ar"
0 0 8 3 1 #"d"
0 0 4 3 1 #" "
0 0 8 3 2 #"pl"
0 0 8 3 2 #"ay"
0 0 8 3 2 #"er"
0 0 4 3 1 #" "
0 0 8 3 3 #"col"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"poss"
0 0 8 3 2 #"ib"
0 0 8 3 5 #"le-mo"
0 0 8 3 1 #"v"
0 0 8 3 1 #"e"
0 0 8 3 1 #"s"
0 0 11 3 1 #" "
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 1 #"d"
0 0 11 3 1 #" "
0 0 8 3 1 #"p"
0 0 8 3 1 #"l"
0 0 8 3 1 #"a"
0 0 8 3 1 #"y"
0 0 8 3 1 #"e"
0 0 8 3 1 #"r"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"+"
0 0 11 3 1 #" "
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 11 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"D"
0 0 11 3 1 #"e"
0 0 11 3 1 #"f"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 2 #"e "
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"c"
0 0 11 3 1 #"k"
0 0 11 3 1 #"-"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"a"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"c"
0 0 11 3 1 #"k"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"e"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"t"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"a"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"n"
0 0 11 3 1 #"o"
0 0 11 3 1 #"d"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 2 #"e."
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"I"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #"s"
0 0 11 3 1 #","
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #","
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"o"
0 0 11 3 1 #"s"
0 0 11 3 1 #"s"
0 0 11 3 1 #","
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"e"
0 0 11 3 1 #"."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 1 #"d"
0 0 9 3 1 #"e"
0 0 9 3 1 #"f"
0 0 9 3 1 #"i"
0 0 9 3 1 #"n"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 1 #"c"
0 0 8 3 1 #"k"
0 0 8 3 1 #"-"
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"a"
0 0 8 3 1 #"f"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"a"
0 0 8 3 1 #"f"
0 0 8 3 1 #"-"
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 2 #"d "
0 0 16 3 1 #"("
0 0 8 3 1 #"g"
0 0 8 3 1 #"e"
0 0 8 3 1 #"t"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 1 #"o"
0 0 8 3 1 #"r"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 8 3 1 #"i"
0 0 8 3 1 #"f"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"equal?"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"win-check"
0 0 11 3 1 #" "
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"a"
0 0 8 3 1 #"f"
0 0 8 3 1 #"-"
0 0 8 3 1 #"b"
0 0 8 3 1 #"o"
0 0 8 3 1 #"a"
0 0 8 3 1 #"r"
0 0 8 3 1 #"d"
0 0 11 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 14 3 2 #"#t"
0 0 11 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"f"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 8 3 1 #"i"
0 0 8 3 1 #"f"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"equal?"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"win-check"
0 0 11 3 1 #" "
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"a"
0 0 8 3 7 #"f-board"
0 0 11 3 1 #" "
0 0 8 3 5 #"other"
0 0 16 3 1 #")"
0 0 11 3 2 #"  "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"t"
0 0 11 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"f"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 16 3 1 #"("
0 0 8 3 1 #"i"
0 0 8 3 1 #"f"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"e"
0 0 8 3 1 #"q"
0 0 8 3 1 #"u"
0 0 8 3 1 #"a"
0 0 8 3 1 #"l"
0 0 8 3 1 #"?"
0 0 11 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"t"
0 0 8 3 1 #"i"
0 0 8 3 1 #"e"
0 0 8 3 1 #"-"
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"e"
0 0 8 3 2 #"ck"
0 0 11 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"t"
0 0 16 3 1 #")"
0 0 11 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"t"
0 0 11 3 1 #" "
0 0 14 3 1 #"#"
0 0 14 3 1 #"f"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"D"
0 0 11 3 1 #"e"
0 0 11 3 1 #"f"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 3 #"n f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"o"
0 0 11 3 1 #"o"
0 0 11 3 1 #"k"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"w"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"e"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"t"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"n"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 11 3 1 #"s"
0 0 11 3 1 #"."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 1 #"d"
0 0 9 3 1 #"e"
0 0 9 3 1 #"f"
0 0 9 3 1 #"i"
0 0 9 3 1 #"n"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"m"
0 0 8 3 1 #"i"
0 0 8 3 1 #"n"
0 0 4 3 1 #" "
0 0 8 3 1 #"a"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"i"
0 0 8 3 1 #"f"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"<"
0 0 4 3 1 #" "
0 0 8 3 1 #"a"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"a"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"D"
0 0 11 3 1 #"e"
0 0 11 3 1 #"f"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 2 #"x "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"o"
0 0 11 3 1 #"o"
0 0 11 3 1 #"k"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 2 #"t "
0 0 11 3 1 #"t"
0 0 11 3 1 #"w"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"e"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"t"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 2 #"ha"
0 0 11 3 1 #"t"
0 0 11 3 2 #" i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"g"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #"."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 1 #"d"
0 0 9 3 1 #"e"
0 0 9 3 1 #"f"
0 0 9 3 1 #"i"
0 0 9 3 1 #"n"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"m"
0 0 8 3 2 #"ax"
0 0 4 3 1 #" "
0 0 8 3 1 #"a"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 1 #"i"
0 0 8 3 1 #"f"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #">"
0 0 4 3 1 #" "
0 0 8 3 1 #"a"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"a"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 2 #";;"
0 0 11 3 1 #" "
0 0 11 3 1 #"A"
0 0 11 3 1 #"T"
0 0 11 3 6 #"TEMPT "
0 0 11 3 13 #"TO IMPLEMENT "
0 0 11 3 1 #"A"
0 0 11 3 1 #"L"
0 0 11 3 1 #"P"
0 0 11 3 1 #"H"
0 0 11 3 1 #"A"
0 0 11 3 1 #"-"
0 0 11 3 1 #"B"
0 0 11 3 1 #"E"
0 0 11 3 1 #"T"
0 0 11 3 1 #"A"
0 0 11 3 1 #" "
0 0 11 3 1 #"P"
0 0 11 3 1 #"R"
0 0 11 3 1 #"U"
0 0 11 3 1 #"N"
0 0 11 3 1 #"I"
0 0 11 3 1 #"N"
0 0 11 3 2 #"G "
0 0 11 3 1 #"M"
0 0 11 3 1 #"I"
0 0 11 3 2 #"NI"
0 0 11 3 1 #"M"
0 0 11 3 1 #"A"
0 0 11 3 1 #"X"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7 00000002101 4 00000000000 1 00000000000 349 0 11 3 75
(
 #";; Define alpha-beta function which will perform all necessary calc"
 #"ulations"
) 0 0 2 29 1 #"\n"
0 0 11 3 15 #";; for the DFS."
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"alpha-beta"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 2 3 1 #" "
0 0 8 3 5 #"depth"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 16 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #"or"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"check-leaf"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 2 3 1 #" "
0 0 8 3 5 #"depth"
0 0 2 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 10 #"board-eval"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"equal?"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 2 3 1 #" "
0 0 8 3 5 #"other"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 11 3 45 #"; If we're at a min node, evaluate using min."
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 2 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 14 #"possible-moves"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 2 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 2 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 19 #"                   "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"min"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"alpha-beta"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 2 3 1 #" "
0 0 8 3 5 #"depth"
0 0 2 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 8 3 6 #"player"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 16 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 16 #"                "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 2 3 1 #" "
0 0 8 3 6 #"player"
0 0 2 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #">="
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 16 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 8 3 4 #"beta"
0 0 16 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 11 3 48 #"; Otherwise, we're at a max. Evaluate using max."
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 2 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 14 #"possible-moves"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 2 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 2 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 19 #"                   "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"min"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"alpha-beta"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 2 3 1 #" "
0 0 8 3 5 #"depth"
0 0 2 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 8 3 6 #"player"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 16 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 16 #"                "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 2 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 2 3 1 #" "
0 0 8 3 6 #"player"
0 0 2 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #">="
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 8 3 4 #"beta"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 2 3 1 #" "
0 0 8 3 5 #"alpha"
0 0 16 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 11 #"           "
0 0 2 29 1 #"\n"
0 0 2 3 11 #"           "
0 0 8 3 5 #"alpha"
0 0 16 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 11 3 78
(
 #";; Define minimax function here that will calculate the best column"
 #" to choose."
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 2 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 7 #"minimax"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 2 3 1 #" "
0 0 8 3 5 #"depth"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 10 #"alpha-beta"
0 0 2 3 1 #" "
0 0 8 3 1 #"b"
0 0 2 3 1 #" "
0 0 8 3 5 #"depth"
0 0 2 3 1 #" "
0 0 8 3 1 #"p"
0 0 2 3 1 #" "
0 0 14 3 6 #"-10000"
0 0 2 3 1 #" "
0 0 14 3 5 #"10000"
0 0 16 3 2 #"))"
0 00000000000 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 9 #";;;;;;;;;"
0 0 11 3 13 #";;;;;;;;;;;;;"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 3 #";; "
0 0 11 3 1 #"M"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 1 #"x"
0 0 11 3 1 #" "
0 0 11 3 1 #"I"
0 0 11 3 1 #"m"
0 0 11 3 1 #"p"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 2 #"ta"
0 0 11 3 3 #"tio"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 7 #";;;;;;;"
0 0 11 3 2 #";;"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 4 #";;;;"
0 0 11 3 5 #";;;;;"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"max-value"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #"or"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"check-leaf"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 10 #"board-eval"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 14 3 8 #"-1000000"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 14 #"possible-moves"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"max"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"min-value"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"other"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"min-value"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 2 #"or"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 10 #"check-leaf"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"#t"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 10 #"board-eval"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 14 3 8 #"-1000000"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 14 #"possible-moves"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 9 3 2 #"do"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 8 #"children"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"min"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 9 #"max-value"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 3 #"car"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"-"
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 16 3 2 #"(("
0 0 8 3 5 #"null?"
0 0 4 3 1 #" "
0 0 8 3 8 #"children"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 5 #"max-v"
0 0 16 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 6 #"define"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 7 #"minimax"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 8 3 9 #"max-value"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 5 #"depth"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 6 #"!!!!!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 6 #"!!!!!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 6 #"!!!!!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 4 #"    "
0 0 11 3 7 #"       "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 3 #"   "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 5 #"     "
0 0 11 3 1 #" "
0 0 11 3 4 #"    "
0 0 11 3 8 #"        "
0 0 11 3 7 #"       "
0 0 11 3 1 #" "
0 0 11 3 5 #"     "
0 0 11 3 3 #"   "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 10 #"          "
0 0 11 3 2 #"  "
0 0 11 3 2 #"  "
0 0 11 3 4 #"    "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"N"
0 0 11 3 1 #"O"
0 0 11 3 2 #"TE"
0 0 11 3 1 #" "
0 0 11 3 1 #"-"
0 0 11 3 1 #"-"
0 0 11 3 1 #"-"
0 0 11 3 1 #" "
0 0 11 3 1 #"I"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"r"
0 0 11 3 1 #"i"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"g"
0 0 11 3 1 #"u"
0 0 11 3 2 #"la"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 2 #"x "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #"r"
0 0 11 3 2 #"un"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 4 #"plem"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"e"
0 0 11 3 1 #"e"
0 0 11 3 2 #"n "
0 0 11 3 1 #"a"
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"v"
0 0 11 3 1 #"e"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #"I"
0 0 11 3 1 #" "
0 0 11 3 1 #"h"
0 0 11 3 1 #"a"
0 0 11 3 1 #"v"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 4 #"    "
0 0 11 3 2 #"co"
0 0 11 3 1 #"m"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #"o"
0 0 11 3 1 #"t"
0 0 11 3 2 #"h "
0 0 11 3 1 #"s"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 5 #"you c"
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"o"
0 0 11 3 1 #"o"
0 0 11 3 2 #"k "
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 2 #"mp"
0 0 11 3 1 #"l"
0 0 11 3 2 #"em"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 3 #"ati"
0 0 11 3 1 #"o"
0 0 11 3 5 #"n att"
0 0 11 3 1 #"e"
0 0 11 3 3 #"mpt"
0 0 11 3 1 #"s"
0 0 11 3 2 #". "
0 0 11 3 1 #"M"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"m"
0 0 11 3 1 #"u"
0 0 11 3 1 #"l"
0 0 11 3 1 #"a"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #" "
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"n"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"d"
0 0 11 3 1 #"o"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"g"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"j"
0 0 11 3 1 #"o"
0 0 11 3 1 #"b"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 2 #"t "
0 0 11 3 2 #"co"
0 0 11 3 1 #"r"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"l"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"p"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"t"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"p"
0 0 11 3 1 #"a"
0 0 11 3 1 #"c"
0 0 11 3 1 #"e"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #"A"
0 0 11 3 1 #"L"
0 0 11 3 1 #"L"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"a"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"."
0 0 11 3 1 #"s"
0 0 11 3 1 #"c"
0 0 11 3 1 #"m"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"i"
0 0 11 3 1 #"l"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"k"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 2 #"re"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"l"
0 0 11 3 1 #"y"
0 0 11 3 1 #","
0 0 11 3 1 #" "
0 0 11 3 1 #"e"
0 0 11 3 1 #"x"
0 0 11 3 1 #"c"
0 0 11 3 1 #"e"
0 0 11 3 1 #"p"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 1 #"x"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #"I"
0 0 11 3 1 #"'"
0 0 11 3 1 #"v"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"r"
0 0 11 3 1 #"i"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"d"
0 0 11 3 1 #"e"
0 0 11 3 1 #"b"
0 0 11 3 1 #"u"
0 0 11 3 1 #"g"
0 0 11 3 1 #"g"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"d"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"h"
0 0 11 3 1 #"o"
0 0 11 3 2 #"ur"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"u"
0 0 11 3 1 #"p"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"n"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"l"
0 0 11 3 1 #"u"
0 0 11 3 1 #"c"
0 0 11 3 2 #"k,"
0 0 11 3 2 #" h"
0 0 11 3 1 #"o"
0 0 11 3 2 #"pe"
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"y"
0 0 11 3 1 #"o"
0 0 11 3 1 #"u"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #"r"
0 0 11 3 1 #"o"
0 0 11 3 1 #"v"
0 0 11 3 1 #"i"
0 0 11 3 1 #"d"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 1 #"i"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"m"
0 0 11 3 1 #"p"
0 0 11 3 1 #"t"
0 0 11 3 1 #"s"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #"I"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"g"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"s"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 2 #" e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"o"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"n"
0 0 11 3 1 #"a"
0 0 11 3 1 #"m"
0 0 11 3 1 #"e"
0 0 11 3 1 #"n"
0 0 11 3 1 #"t"
0 0 11 3 1 #","
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 3 #"   "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"y"
0 0 11 3 1 #" "
0 0 11 3 1 #"g"
0 0 11 3 2 #"et"
0 0 11 3 1 #"m"
0 0 11 3 1 #"o"
0 0 11 3 1 #"v"
0 0 11 3 2 #"e "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #"t"
0 0 11 3 1 #"u"
0 0 11 3 1 #"r"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"r"
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #"o"
0 0 11 3 1 #"m"
0 0 11 3 1 #" "
0 0 11 3 1 #"v"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"i"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"n"
0 0 11 3 1 #"u"
0 0 11 3 1 #"m"
0 0 11 3 1 #"b"
0 0 11 3 1 #"e"
0 0 11 3 1 #"r"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"c"
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"g"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 2 #"he"
0 0 11 3 3 #" bo"
0 0 11 3 1 #"a"
0 0 11 3 1 #"r"
0 0 11 3 1 #"d"
0 0 11 3 1 #"."
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 8 #"        "
0 0 11 3 1 #" "
0 0 11 3 10 #"          "
0 0 11 3 1 #" "
0 0 11 3 4 #"    "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 5 #"     "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 4 #"    "
0 0 11 3 4 #"    "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 2 #"  "
0 0 11 3 2 #"  "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 1 #" "
0 0 11 3 3 #"   "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #" "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 6 #"!!!!!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 6 #"!!!!!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 2 #"!!"
0 0 11 3 1 #"!"
0 0 11 3 6 #"!!!!!!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #"!"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 1 #"d"
0 0 9 3 1 #"e"
0 0 9 3 1 #"f"
0 0 9 3 2 #"in"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"o"
0 0 8 3 1 #"o"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 8 3 1 #"-"
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 3 #"let"
0 0 4 3 1 #" "
0 0 16 3 2 #"(("
0 0 8 3 2 #"co"
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"r"
0 0 8 3 1 #"a"
0 0 8 3 1 #"n"
0 0 8 3 2 #"do"
0 0 8 3 1 #"m"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"l"
0 0 8 3 1 #"e"
0 0 8 3 1 #"n"
0 0 8 3 3 #"gth"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 9 3 1 #"c"
0 0 9 3 1 #"o"
0 0 9 3 1 #"n"
0 0 9 3 1 #"d"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 2 #"(("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 15 #"lazoc-getsqaure"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"0"
0 0 16 3 1 #")"
0 0 4 3 1 #" "
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 16 3 1 #"("
0 0 8 3 1 #"e"
0 0 8 3 1 #"l"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"o"
0 0 8 3 1 #"o"
0 0 8 3 1 #"s"
0 0 8 3 1 #"e"
0 0 8 3 1 #"-"
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"D"
0 0 11 3 1 #"e"
0 0 11 3 1 #"f"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"g"
0 0 11 3 1 #"e"
0 0 11 3 1 #"t"
0 0 11 3 1 #"-"
0 0 11 3 1 #"m"
0 0 11 3 1 #"o"
0 0 11 3 1 #"v"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 3 #" he"
0 0 11 3 1 #"r"
0 0 11 3 1 #"e"
0 0 11 3 1 #","
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 2 #"ca"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 6 #"imax a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"p"
0 0 11 3 1 #"h"
0 0 11 3 1 #"a"
0 0 11 3 1 #"-"
0 0 11 3 1 #"b"
0 0 11 3 1 #"e"
0 0 11 3 1 #"t"
0 0 11 3 1 #"a"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"o"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"o"
0 0 11 3 1 #"l"
0 0 11 3 1 #"u"
0 0 11 3 1 #"m"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"h"
0 0 11 3 1 #"i"
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 1 #"x"
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 1 #"z"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 4 29 1 #"\n"
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"c"
0 0 11 3 1 #"h"
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"e"
0 0 11 3 1 #"s"
0 0 11 3 1 #" "
0 0 11 3 1 #"o"
0 0 11 3 1 #"f"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"n"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 2 #"g."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 16 3 1 #"("
0 0 9 3 1 #"d"
0 0 9 3 1 #"e"
0 0 9 3 3 #"fin"
0 0 9 3 1 #"e"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"l"
0 0 8 3 1 #"a"
0 0 8 3 1 #"z"
0 0 8 3 1 #"o"
0 0 8 3 1 #"c"
0 0 8 3 5 #"-getm"
0 0 8 3 1 #"o"
0 0 8 3 2 #"ve"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 16 3 1 #"("
0 0 9 3 1 #"b"
0 0 9 3 1 #"e"
0 0 9 3 1 #"g"
0 0 9 3 1 #"i"
0 0 9 3 1 #"n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 11 3 60
#";; Set appropriate player configurations for board analysis."
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 2 #"if"
0 0 4 3 1 #" "
0 0 16 3 1 #"("
0 0 8 3 1 #"="
0 0 4 3 1 #" "
0 0 8 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"other"
0 0 4 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 16 3 1 #"("
0 0 9 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 6 #"player"
0 0 4 3 1 #" "
0 0 14 3 1 #"2"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 16 3 1 #"("
0 0 8 3 4 #"set!"
0 0 4 3 1 #" "
0 0 8 3 5 #"other"
0 0 4 3 1 #" "
0 0 14 3 1 #"1"
0 0 16 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"C"
0 0 11 3 1 #"a"
0 0 11 3 1 #"l"
0 0 11 3 1 #"l"
0 0 11 3 1 #" "
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #"e"
0 0 11 3 1 #" "
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 1 #"x"
0 0 11 3 1 #" "
0 0 11 3 1 #"f"
0 0 11 3 1 #"u"
0 0 11 3 1 #"n"
0 0 11 3 1 #"c"
0 0 11 3 1 #"t"
0 0 11 3 1 #"i"
0 0 11 3 1 #"o"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"w"
0 0 11 3 1 #"i"
0 0 11 3 1 #"t"
0 0 11 3 1 #"h"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"n"
0 0 11 3 1 #" "
0 0 11 3 1 #"a"
0 0 11 3 1 #"s"
0 0 11 3 1 #"s"
0 0 11 3 1 #"o"
0 0 11 3 1 #"s"
0 0 11 3 1 #"c"
0 0 11 3 1 #"i"
0 0 11 3 1 #"a"
0 0 11 3 1 #"t"
0 0 11 3 1 #"e"
0 0 11 3 1 #"d"
0 0 11 3 1 #" "
0 0 11 3 1 #"d"
0 0 11 3 5 #"epth."
0 0 11 3 1 #" "
0 0 11 3 2 #";;"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 11 3 1 #";"
0 0 11 3 1 #";"
0 0 11 3 1 #" "
0 0 11 3 1 #"("
0 0 11 3 1 #"m"
0 0 11 3 1 #"i"
0 0 11 3 1 #"n"
0 0 11 3 1 #"i"
0 0 11 3 1 #"m"
0 0 11 3 1 #"a"
0 0 11 3 1 #"x"
0 0 11 3 1 #" "
0 0 11 3 1 #"b"
0 0 11 3 1 #" "
0 0 11 3 1 #"5"
0 0 11 3 1 #" "
0 0 11 3 1 #"p"
0 0 11 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 1 #"("
0 0 8 3 1 #"c"
0 0 8 3 1 #"h"
0 0 8 3 1 #"o"
0 0 8 3 1 #"o"
0 0 8 3 1 #"s"
0 0 8 3 2 #"e-"
0 0 8 3 1 #"c"
0 0 8 3 1 #"o"
0 0 8 3 1 #"l"
0 0 4 3 1 #" "
0 0 8 3 1 #"b"
0 0 16 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 16 3 2 #"))"
0 00000000000
